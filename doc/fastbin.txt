Los fastbins son una estructura clave en la implementación de malloc de glibc (ptmalloc2) diseñada para gestionar asignaciones y liberaciones rápidas de bloques de memoria pequeños. Aquí está todo lo que necesitas saber:

1. Propósito de los Fastbins
Optimización de velocidad: Manejan bloques pequeños de memoria (típicamente entre 16 y 128 bytes en sistemas de 32 bits, y hasta 160 bytes en 64 bits), priorizando velocidad sobre la reducción de fragmentación.

LIFO (Last-In-First-Out): Usan una lista enlazada simple, donde el último bloque liberado es el primero en ser reasignado. Esto mejora la localidad de caché.

2. Estructura de los Fastbins
Listas enlazadas por tamaño: Existen 10 fastbins predeterminados (en ptmalloc2), cada uno dedicado a un tamaño específico:

Ejemplo: En 64 bits, los tamaños suelen ser 16, 24, 32, ..., 160 bytes (múltiplos de 16 + 8 debido al alineamiento).

Encabezado (chunk metadata): Cada chunk libre en un fastbin almacena:

Tamaño del chunk (en el encabezado, usando los bits menos significativos para flags).

Puntero al siguiente chunk (fd) en la lista (solo cuando está libre).

3. Asignación (malloc)
Búsqueda en el fastbin correspondiente:

Si se solicita un bloque de tamaño N, malloc busca en el fastbin asociado a ese tamaño.

Si hay un chunk libre, se desenlaza de la lista (LIFO) y se marca como "en uso".

Si el fastbin está vacío:

Se recurre a otros bins (smallbins, unsorted bins) o se solicita más memoria al sistema (vía sbrk/mmap).

4. Liberación (free)
Verificación de tamaño: Si el chunk liberado es pequeño y está dentro del rango de los fastbins:

Se agrega al inicio del fastbin correspondiente.

No coalescing inmediato: Los chunks en fastbins no se fusionan con vecinos libres para evitar sobrecarga. Esto puede causar fragmentación temporal.

Seguridad: Glibc verifica que no se libere el mismo chunk dos veces consecutivas (mitigación de ataques double-free).

5. Características Clave
Máximo tamaño (global_max_fast): Controlado por el parámetro M_MXFAST (ajustable via mallopt). Por defecto:

80 bytes en 32 bits.

160 bytes en 64 bits.

Merge diferido: La fusión (coalescing) de chunks se realiza durante operaciones como malloc_consolidate (ej: al llamar free en un chunk grande).

6. Diferencias con Otros Bins
Característica	Fastbins	Small/Large/Unsorted Bins
Estructura	Lista LIFO (singly-linked)	Listas circulares (doubly-linked)
Coalescing	No inmediato	Sí (para reducir fragmentación)
Rangos de tamaño	Bloques pequeños	Pequeños, medianos y grandes
Velocidad	Máxima prioridad	Más lento (gestión compleja)
7. Ejemplo Visual de un Fastbin
Fastbin para 32 bytes:
HEAD -> Chunk3 (liberado último) -> Chunk2 -> Chunk1 (liberado primero)
Al asignar, se toma Chunk3.

8. Ataques Comunes (Heap Exploitation)
Los fastbins son objetivos frecuentes por su simplicidad:

Double Free: Liberar un chunk dos veces para crear ciclos en la lista.

Heap Overflow: Modificar el puntero fd de un chunk libre para controlar direcciones de memoria asignadas.

Mitigaciones: Glibc incluye checks como:

Verificar que el chunk a liberar no sea igual al anterior (==).

Validar que el tamaño pertenezca a un fastbin.

9. Conclusión
Los fastbins son esenciales para optimizar el rendimiento en programas que manejan muchas asignaciones pequeñas y frecuentes (ej: manejo de strings o estructuras temporales). Sin embargo, su falta de coalescing y estructura simple los hace vulnerables si no se usan correctamente. Entenderlos es clave tanto para desarrollar código eficiente como para analizar vulnerabilidades en el heap.